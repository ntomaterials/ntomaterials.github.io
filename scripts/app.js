const headElem = document.getElementById("head");
const buttonsElem = document.getElementById("buttons");
const pagesElem = document.getElementById("pages");



// Возможные варианты ответа
const options = ["нет", "не знаю", "скорее да", "определенно да"]

// Список направлений
const profiles = 
[
	"Ядерные технологии", 
	"Интеллектуальные энергетические системы", 
	"Технологии беспроводной связи", 
	"Информационная безопасность", 
	"Программная инженерия финансовых технологий", 
	"Большие данные и машинное обучение", 
	"Искусственный интеллект", 
	"Нейротехнологии и когнитивные науки", 
	"Инженерные биологические системы. Агробиотехнологии", 
	"Новые материалы", 
	"Геномное редактирование", 
	"Наносистемы и наноинженерия", 
	"Современная пищевая инженерия", 
	"Композитные технологии", 
	"Анализ космических снимков и геопространственных данных", 
	"Фотоника", 
	"Передовые производственные технологии", 
	"Цифровые сенсорные системы", 
	"Спутниковые системы", 
	"Водные роботехнические системы", 
	"Интеллектуальные роботехнические системы", 
	"Беспилотные авиационные системы", 
	"Аэрокосмические системы", 
	"Автономные транспортные системы", 
	"Летающая робототехника", 
	"Умный город", 
	"Цифровые технологии в архитектуре", 
	"Разработка компьютерных игр", 
	"Научная медиажурналистика", 
	"Технологии  AR", 
	"Технологии VR", 
	"Автоматизация бизнес-процессов", 
	"Технологическое предпринимательство"
]

const p_count = profiles.length;

// Список вопросов
const data_questions = 
[
	"Я увлекаюсь робототехникой и хочу принимать участие в робототехнических соревнованиях.",
	"Я хочу проектировать, создавать новые инженерные и технологические решения с нуля до реализации на производстве.",
	"Меня интересуют протоколы передачи данных.",
	"Мне больше интересны технологии на более низком уровне, например — цифровая обработка сигнала.",
	"Я люблю математику, особенно задачи по комбинаторике, теории игр или теории вероятности.",
	"Мне нравится изучать алгоритмы. Я изучил(а) или собираюсь изучить структуры данных и графы.",
	"Мне кажется, математическое моделирование — это интересная и перспективная тема, и я хочу изучать ее особенности.",
	"Меня интересует ядерная физика и перспективы ядерной энергетики.",
	"Я бы хотел(а) поработать со стендом для моделирования интеллектуальной энергетической.",
	"Мне кажется интересной и перспективной работа с нейроинтерфейсами.",
	"Я изучаю или хочу изучать алгоритмы машинного обучения.",
	"Я хочу заниматься разработкой клиент-серверных приложений.",
	"Я изучаю или планирую изучать программирование на Python.",
	"Мне интересно работать с базами данных, и я немного знаю SQL.",
	"Считаю, что для будущего IT-специалиста особенно важно уметь работать с системами контроля версий, например git, и я готов(а) погрузиться в это.",
	"Я изучаю или планирую изучать программирование на C/C++.",
	"Мне интересно заниматься администрированием операционных систем, например Linux.",
	"Я интересуюсь программированием Arduino или Rasberry Pi.",
	"Разбираться в компьютерном зрении — это невероятно круто и интересно, я намерен(а) освоить эту технологию",
	"Я увлекаюсь робототехникой и уже знаком или хочу познакомиться с ROS — Robot Operating System.",
	"Меня всегда интересовал космос, и мне важно понимать о космических технологиях больше.",
	"Мне кажется, что разбираясь в электротехнике и программировании микроконтроллеров, я мог(ла) бы делать невероятно крутые вещи.",
	"На мой взгляд дополненная реальность — это очень перспективное направление, и я бы хотел(а) разобраться в нем.",
	"Можно сказать, что я скорее творческий человек, чем «технарь».",
	"Я уже пробовал(а) или собираюсь попробовать свои силы в создании виртуальных миров, игр в Unity или других игровых движках.",
	"Меня увлекает 3D-моделирование, я могу делать классные вещи в Blender или 3D Max.",
	"Хочу заниматься разработкой мобильных или веб-приложений, у меня уже есть свои идеи для приложения.",
	"Мне кажется, что я — прирожденный предприниматель, готов управлять командой и преодолевать любые преграды.",
	"Меня интересуют современные направления в географии, особенно работа с ГИС-системами.",
	"Я изучаю или хочу изучать проектирование в САПР (Autodesk Inventor, Компас и т.д.)",
	"Мне знакомы продукты компании 1С, и я думаю, что с их помощью смогу решить многие бизнес-задачи.",
	"Я увлекаюсь химией, и мне нравится проводить химические опыты.",
	"Я всегда любил(а) биологию.",
	"Больше всего мне интересна работа в химической или физико-химической лаборатории.",
	"Хочу изучать молекулярную биологию и геномное редактирование, потому что уверен(а), что это перспективное направление, которое может изменить жизнь людей к лучшему.",
	"Меня волнуют вопросы экологии и изменения климата.",
	"Я бы хотел(а) спроектировать свою собственную сити-ферму.",
	"Один из моих любимых предметов — физика.",
	"Мне интересны оптоволоконные технологии."
]

// Список иллюстраций
const images_filename = [
	"img001.jpg",
	"img002.jpg",
	"img003.jpg",
	"img004.jpg",
	"img005.jpg",
	"img006.jpg",
	"img007.jpg",
	"img008.jpg",
	"img009.jpg",
	"img010.jpg",
	"img11.jpg",
	"img12.jpg",
	"img13.jpg",
	"img14.jpg",
	"img15.jpg",
	"img16.jpg",
	"img17.jpg",
	"img18.jpg",
	"img19.jpg",
	"img20.jpg",
	"img21.jpg",
	"img22.jpg",
	"img23.jpg",
	"img24.jpg",
	"img25.jpg",
	"img26.jpg",
	"img27.jpg",
	"img28.jpg",
	"img29.jpg",
	"img30.jpg",
	"img31.jpg",
	"img32.jpg",
	"img33.jpg",
	"img34.jpg",
	"img35.jpg",
	"img36.jpg",
	"img37.jpg",
	"img38.jpg",
	"img39.jpg"
]


// Матрица соответствия. По столбцам - профили, по строкам - вопросы. 
// На пересечении "1" или "2" у тех вопросов, которые дают балл для соответствующего профиля.
const data_results = 
[
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	2,	2,	2,	2,	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	2,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	1,	2,	1,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	2,	2,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	1,	1,	],
	[	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	1,	0,	0,	1,	1,	0,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	1,	0,	0,	0,	],
	[	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	1,	0,	1,	0,	0,	0,	0,	1,	0,	1,	1,	0,	0,	],
	[	1,	1,	1,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	0,	0,	1,	0,	0,	2,	1,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	2,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	2,	1,	1,	1,	2,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1,	2,	2,	1,	2,	1,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	2,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	1,	2,	1,	1,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	2,	2,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	2,	2,	1,	2,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	2,	1,	1,	1,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1,	1,	1,	1,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	2,	1,	0,	1,	1,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	2,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	2,	0,	1,	0,	1,	0,	0,	0,	1,	0,	1,	1,	2,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	2,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	],
	[	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	2,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	]
];

// Максимально возможное количество баллов, которое можно набрать за профиль
const max_results_by_profile = new Array(profiles.length)
for (var i = 0; i < p_count; i++) {
	var sum = 0;
	for (var j = 0; j < data_questions.length; j++) {
		sum += data_results[j][i];
	}
	max_results_by_profile[i] = sum * 2;
}


//Класс, который представляет сам тест
class Quiz
{
	constructor(questions, images, recommendations)
	{

		//Массив с вопросами
		this.questions = questions;

		// Массив с иллюстрациями
		this.images = images;

		//Массив с рекомендованными профилями
		this.recommendations = Array.from(recommendations);

		//Количество набранных очков по каждому профилю
		this.score = new Array(p_count);
		for (var i = 0; i < p_count; i++) {
			this.score[i] = 0;
		}

		this.result = "Здесь будет ваш результат!!";

		//Номер текущего вопроса
		this.current = 0;
	}

	Click(index)
	{
		//Добавляем баллы
		let value = this.questions[this.current].Click(index);
		console.log(this.current);
		for (var i = 0; i < p_count; i++){
			this.score[i] += data_results[this.current][i] * value;
		}
		
		let correct = index;

		this.Next();

		return correct;
	}

	//Переход к следующему вопросу
	Next()
	{
		this.current++;
		
		if(this.current >= this.questions.length) 
		{
			this.End();
		}
	}

	//Если вопросы кончились, этот метод проверит, какой результат получил пользователь
	End()
	{
		for (var i = 0; i < p_count; i++){
			this.score[i] = Math.floor(this.score[i] / max_results_by_profile[i] * 100);
		}
		// сортируем массив профилей по убыванию результатов
		var temp = {};
		for (var i = 0; i < p_count; i++){
			temp[this.recommendations[i]] = this.score[i];
		}
		this.recommendations.sort(function(a, b) {
			return temp[b] - temp[a]
		});
		
		this.score.sort(function(a, b) {
			return b - a
		});
		
		if (this.score[10] == 100) {
			this.result = "Вы уверены, что искренне отвечали на вопросы? Советуем пройти тест еще раз."
		}
		else if (this.score[0] < 55){
			this.result = "Кажется вас не заинтересует ни один из профилей :( Проанализируйте свои ответы и попробуйте пройти тест еще раз."
		}
		else{
			this.result = " <p aligh=\"left\">Рекомендуемые вам профили: ";
			var i = 0;
			do {
				this.result += "<br> <br>" + this.recommendations[i] + " (" + this.score[i].toString() + "%), ";
				i++;
			}
			while(this.score[i] >= 60 && i < 4);
			this.result = this.result.substr(0, this.result.length - 2)
			this.result += "</p>"
		}
	
		
		console.log(this.result);
		// console.log(this.score[0]);
		// console.log(this.recommendations[0]);
	}
} 

//Класс, представляющий вопрос
class Question 
{
	constructor(text, answers)
	{
		this.text = text; 
		this.answers = answers; 
	}

	Click(index) 
	{
		return this.answers[index].value; 
	}
}

//Класс, представляющий ответ
class Answer 
{
	constructor(text, value) 
	{
		this.text = text; 
		this.value = value; 
	}
}


//Массив с вопросами
questions = [];
questions.length = data_questions.length;
for (var i = 0; i < data_questions.length; i++) {
	questions[i] = new Question(data_questions[i], 
	[
		new Answer(options[0], 0),
		new Answer(options[1], 0),
		new Answer(options[2], 1),
		new Answer(options[3], 2)
	]);
}


//Сам тест
const quiz = new Quiz(questions, images_filename, profiles);

Update();

//Обновление теста
function Update()
{
	if(quiz.current < quiz.questions.length) 
	{
		// headElem.innerHTML = quiz.questions[quiz.current].text; 
		html_text = "<img class=\"picture\" src=\"images\\" + quiz.images[quiz.current] + "\"> <br> " + quiz.questions[quiz.current].text;
		headElem.innerHTML = html_text;
		// console.log(html_text);
		buttonsElem.innerHTML = "";
		for(let i = 0; i < quiz.questions[quiz.current].answers.length; i++)
		{
			let btn = document.createElement("button");
			btn.className = "button";
			btn.innerHTML = quiz.questions[quiz.current].answers[i].text;
			btn.setAttribute("index", i);
			buttonsElem.appendChild(btn);
		}
		
		pagesElem.innerHTML = (quiz.current + 1) + " / " + quiz.questions.length;
		Init();
	}
	else
	{
		buttonsElem.innerHTML = "";
		headElem.innerHTML = quiz.result;
		pagesElem.innerHTML = "<a href = \"https://ntcontest.ru/participants/\" target=\"_blank\"> Приглашаем к участию в НТО </a>"; 
	}
}

function Init()
{
	let btns = document.getElementsByClassName("button");

	for(let i = 0; i < btns.length; i++)
	{
		btns[i].addEventListener("click", function (e) { Click(e.target.getAttribute("index")); });
	}
}

function Click(index) 
{
	//Получаем номер ответа
	let answer = quiz.Click(index);

	let btns = document.getElementsByClassName("button");

	for(let i = 0; i < btns.length; i++)
	{
		btns[i].className = "button button_passive";
	}

	
	btns[index].className = "button button_correct";
	
	setTimeout(Update, 300);
}
