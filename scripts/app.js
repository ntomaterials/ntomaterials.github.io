const headElem = document.getElementById("head");
const buttonsElem = document.getElementById("buttons");
const pagesElem = document.getElementById("pages");



// Возможные варианты ответа
const options = ["нет", "скорее да", "определенно да"]

// Список направлений
const profiles = 
[
	"Ядерные технологии", 
	"Интеллектуальные энергетические системы", 
	"Технологии беспроводной связи", 
	"Информационная безопасность", 
	"Программная инженерия финансовых технологий", 
	"Большие данные и машинное обучение", 
	"Искусственный интеллект", 
	"Нейротехнологии и когнитивные науки", 
	"Инженерные биологические системы. Агробиотехнологии", 
	"Новые материалы", 
	"Геномное редактирование", 
	"Наносистемы и наноинженерия", 
	"Современная пищевая инженерия", 
	"Композитные технологии", 
	"Анализ космических снимков и геопространственных данных", 
	"Фотоника", 
	"Передовые производственные технологии", 
	"Цифровые сенсорные системы", 
	"Спутниковые системы", 
	"Водные роботехнические системы", 
	"Интеллектуальные роботехнические системы", 
	"Беспилотные авиационные системы", 
	"Аэрокосмические системы", 
	"Автономные транспортные системы", 
	"Летающая робототехника", 
	"Умный город", 
	"Цифровые технологии в архитектуре", 
	"Разработка компьютерных игр", 
	"Научная медиажурналистика", 
	"Технологии  AR", 
	"Технологии VR", 
	"Автоматизация бизнес-процессов", 
	"Технологическое предпринимательство"
]

const p_count = profiles.length;

// Список вопросов
const data_questions = 
[
	"Я умею или хочу научиться работать с docker.", 
	"Меня интересуют протоколы передачи данных.", 
	"Я изучаю или хочу изучать проектирование в САПР (Autodesk Inventor, Компас и т.д.)", 
	"Я уже освоил(а) или мечтаю освоить работу с 3D-принтером.", 
	"Я мастер работы в Excel!", 
	"Я увлекаюсь органической химией.", 
	"Я хочу проектировать и создавать новые инженерные с нуля до реализации.", 
	"Меня интересует неорганическая химия.", 
	"Я считаю, что смог(ла) был справиться  в будущем с составлением схем технологических процессов.", 
	"Я люблю математику, особенно задачи по комбинаторике, теории игр или теории вероятности.", 
	"Мне нравится изучать алгоритмы. Я изучил(а) или собираюсь изучить структуры данных, графы, ", 
	"Мне кажется, математическое моделирование - это интересная и перспективная тема.", 
	"Меня интересует ядерная физика и перспективы ядерной энергетики.", 
	"Я бы хотел поработать со стендом для моделирования интеллектуальной энергетической системы города.", 
	"Мне кажется интересной и перспективной работа с нейроитерфесами.", 
	"Меня волнуют вопросы экологии и изменения климата.", 
	"Один из моих любимых предметов - физика, например такие  разделы как оптика, кинематика, физика твердого  тела.", 
	"Можно сказать, что я скорее творческий человек, чем \"технарь\".", 
	"Я изучаю или хочу изучать алгоритмы машинного обучения.", 
	"Я хочу заниматься разработкой клиент-серверных приложений.", 
	"Я изучаю или  планирую изучать программирование на Python.", 
	"Мне интересно работать с базами данных и я немного знаю SQL.", 
	"Я считаю, что для будущего IT специалиста умение работать с системами контроля версий, например git - обязательное. ", 
	"Хочу заниматься разработкой мобильных или веб-приложений, у меня уже есть свои идеи для приложения.", 
	"Я изучаю или  планирую изучать программирование на C/C++.", 
	"Мне интересно заниматься администрирование операционных  систем.", 
	"Уверен(а), что молекулярная биология и геномное редактирование сможет изменить нашу жизнь и хочу поучаствовать в этом.", 
	"Я бы хотел(а) спроектировать свою собственную сити-ферму.", 
	"Я интересуюсь програмиированием Arduino или Rasberry Pi.", 
	"Разбираться в компьютерном зрении - это невероятно круто и интересно.", 
	"Я увлекаюсь робототехникой и уже знаком или хочу познакомиться с  ROS - Robot Operating System.", 
	"Больше всего меня привлекает работа в химической или физико-химической лаборатории.", 
	"Я - линуксоид.", 
	"Меня всегда интересовал космос.", 
	"Я увлекаюсь робототехникой и возможно даже уже выступал(а) на роботехнических соревнованиях.", 
	"Мне кажется, что разбираясь в электротехнике и программировании микроконтроллеров, я мог(ла) бы делать невероятно крутые вещи.", 
	"На мой взгляд дополненная реальность - это очень перспективное направление и я бы хотел(а) разобраться в нем.", 
	"Мне больше интересны технологии на более низком уровне, например - цифровая обработка сигнала.", 
	"Я уже пробовал(а) или собираюсь попробовать свои силы в создании виртуальных миров и игр Unity или других игровых движках.", 
	"Я всегда любил(а) биологию.", 
	"Мне интересны оптоволоконные технологии.", 
	"Мне кажется, что биоинформатика - это очень перспективное для меня направление.", 
	"Меня увлекает 3D-моделирование, я могу делать классные вещи в Blender или 3D Max.", 
	"Мне кажется, что я - прирожденный бизнесмен.", 
	"Меня интересуют современные направления в географии, особенно работа с ГИС-системами.", 
	"Мне знакомы продукты компании 1С и я думаю, что с их помощью смогу решить многие бизнес-задачи."
]

// Матрица соответствия. По столбцам - профили, по строкам - вопросы. 
// На пересечении "1" у тех вопросов, которые дают балл для соответствующего профиля.
const data_results = 
[
	[0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
	[0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,1,0,0,0,1,0,1,1,2,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,1,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
	[2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,0,0],
	[0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,1,1],
	[1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0],
	[0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
	[0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,1,0,1,1],
	[1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,2,1,0,0,0,0,0,0,0],
	[0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,2,1,1,1,2,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,2,2,1,2,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,2,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0],
	[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,1,0,0],
	[0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0],
];

// Максимально возможное количество баллов, которое можно набрать за профиль
const max_results_by_profile = new Array(profiles.length)
for (var i = 0; i < p_count; i++) {
	var sum = 0;
	for (var j = 0; j < data_questions.length; j++) {
		sum += data_results[j][i];
	}
	//console.log(sum);
	max_results_by_profile[i] = sum * 2;
}


//Класс, который представляет сам тест
class Quiz
{
	constructor(type, questions, recommendations)
	{
		//Тип теста: 1 - классический тест с правильными ответами, 2 - тест без правильных ответов
		this.type = type;

		//Массив с вопросами
		this.questions = questions;

		//Массив с возможными результатами
		this.recommendations = Array.from(recommendations);

		//Количество набранных очков по каждому профилю
		this.score = new Array(p_count);
		for (var i = 0; i < p_count; i++) {
			this.score[i] = 0;
		}

		//Номер результата из массива
		this.result = "Здесь будет ваш результат!!";

		//Номер текущего вопроса
		this.current = 0;
	}

	Click(index)
	{
		//Добавляем очки
		let value = this.questions[this.current].Click(index);
		console.log(this.current);
		//this.score += value;
		for (var i = 0; i < p_count; i++){
			this.score[i] += data_results[this.current][i] * value;
		}

		let correct = -1;

		//Если было добавлено хотя одно очко, то считаем, что ответ верный
		if(value >= 1)
		{
			correct = index;
		}
		else
		{
			//Иначе ищем, какой ответ может быть правильным
			for(let i = 0; i < this.questions[this.current].answers.length; i++)
			{
				if(this.questions[this.current].answers[i].value >= 1)
				{
					correct = i;
					break;
				}
			}
		}

		this.Next();

		return correct;
	}

	//Переход к следующему вопросу
	Next()
	{
		this.current++;
		
		if(this.current >= this.questions.length) 
		{
			this.End();
		}
	}

	//Если вопросы кончились, этот метод проверит, какой результат получил пользователь
	End()
	{
		for (var i = 0; i < p_count; i++){
			this.score[i] = Math.floor(this.score[i] / max_results_by_profile[i] * 100);
		}
		// сортируем массив профилей по убыванию результатов
		var temp = {};
		for (var i = 0; i < p_count; i++){
			temp[this.recommendations[i]] = this.score[i];
		}
		this.recommendations.sort(function(a, b) {
			return temp[b] - temp[a]
		});
		
		this.score.sort(function(a, b) {
			return b - a
		});
		
		if (this.score[p_count - 5] == 100) {
			this.result = "Вы уверены, что искренне отвечали на вопросы? Советуем пройти тест еще раз."
		}
		else if (this.score[0] < 55){
			this.result = "Кажется вас не заинтересует ни один из профилей :( Проанализируйте свои ответы и попробуйте пройти тест еще раз."
		}
		else{
			this.result = " <p aligh=\"left\">Рекомендуемые вам профили: ";
			var i = 0;
			do {
				this.result += "<br> <br>" + this.recommendations[i] + " (" + this.score[i].toString() + "%), ";
				i++;
			}
			while(this.score[i] >= 60 && i < 4);
			this.result = this.result.substr(0, this.result.length - 2)
			this.result += "</p>"
		}
	
		
		console.log(this.result);
		// console.log(this.score[0]);
		// console.log(this.recommendations[0]);
	}
} 

//Класс, представляющий вопрос
class Question 
{
	constructor(text, answers)
	{
		this.text = text; 
		this.answers = answers; 
	}

	Click(index) 
	{
		return this.answers[index].value; 
	}
}

//Класс, представляющий ответ
class Answer 
{
	constructor(text, value) 
	{
		this.text = text; 
		this.value = value; 
	}
}


//Массив с вопросами
questions = [];
questions.length = data_questions.length;
for (var i = 0; i < data_questions.length; i++) {
	questions[i] = new Question(data_questions[i], 
	[
		new Answer(options[0], 0),
		new Answer(options[1], 1),
		new Answer(options[2], 2)
	]);
}


//Сам тест
const quiz = new Quiz(2, questions, profiles);

Update();

//Обновление теста
function Update()
{
	//Проверяем, есть ли ещё вопросы
	if(quiz.current < quiz.questions.length) 
	{
		//Если есть, меняем вопрос в заголовке
		headElem.innerHTML = quiz.questions[quiz.current].text;

		//Удаляем старые варианты ответов
		buttonsElem.innerHTML = "";

		//Создаём кнопки для новых вариантов ответов
		for(let i = 0; i < quiz.questions[quiz.current].answers.length; i++)
		{
			let btn = document.createElement("button");
			btn.className = "button";

			btn.innerHTML = quiz.questions[quiz.current].answers[i].text;

			btn.setAttribute("index", i);

			buttonsElem.appendChild(btn);
		}
		
		//Выводим номер текущего вопроса
		pagesElem.innerHTML = (quiz.current + 1) + " / " + quiz.questions.length;

		//Вызываем функцию, которая прикрепит события к новым кнопкам
		Init();
	}
	else
	{
		//Если это конец, то выводим результат
		buttonsElem.innerHTML = "";
		headElem.innerHTML = quiz.result;
		// pagesElem.innerHTML = "Еще какой-то текст "; // + quiz.score;
	}
}

function Init()
{
	//Находим все кнопки
	let btns = document.getElementsByClassName("button");

	for(let i = 0; i < btns.length; i++)
	{
		//Прикрепляем событие для каждой отдельной кнопки
		//При нажатии на кнопку будет вызываться функция Click()
		btns[i].addEventListener("click", function (e) { Click(e.target.getAttribute("index")); });
	}
}

function Click(index) 
{
	//Получаем номер правильного ответа
	let correct = quiz.Click(index);

	//Находим все кнопки
	let btns = document.getElementsByClassName("button");

	//Делаем кнопки серыми
	for(let i = 0; i < btns.length; i++)
	{
		btns[i].className = "button button_passive";
	}

	//Если это тест с правильными ответами, то мы подсвечиваем правильный ответ зелёным, а неправильный - красным
	if(quiz.type == 1)
	{
		if(correct >= 0)
		{
			btns[correct].className = "button button_correct";
		}

		if(index != correct) 
		{
			btns[index].className = "button button_wrong";
		} 
	}
	else
	{
		//Иначе просто подсвечиваем зелёным ответ пользователя
		btns[index].className = "button button_correct";
	}

	//Ждём секунду и обновляем тест
	setTimeout(Update, 1000);
}
